// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  _.mixin({
    waterfall: function(fn) {
      var callback, calls, metaMethods, stacks, start;
      stacks = {};
      calls = {};
      metaMethods = ["then", "done", "fail", "anyway"];
      start = function() {
        return fn.apply(null, [null].concat(__slice.call(arguments), [callback]));
      };
      callback = function() {
        var args, err, thenFn;
        err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (err) {
          calls.fail(err);
          calls.anyway(err);
          return;
        }
        if (stacks.then.length) {
          thenFn = stacks.then.shift();
          if (typeof thenFn === "function") {
            thenFn.apply(null, [err].concat(__slice.call(args), [callback]));
          }
          return;
        }
        calls.done.apply(calls, [err].concat(__slice.call(args)));
        return calls.anyway.apply(calls, [err].concat(__slice.call(args)));
      };
      _(metaMethods).forEach(function(method) {
        var _ref;
        if ((_ref = stacks[method]) == null) {
          stacks[method] = [];
        }
        start[method] = function(callback) {
          stacks[method].push(callback);
          return this;
        };
        return calls[method] = function() {
          var stack, _results;
          stack = stacks[method];
          if (stack == null) {
            return;
          }
          _results = [];
          while (stack.length) {
            fn = stack.shift();
            _results.push(typeof fn === "function" ? fn.apply(null, [null].concat(__slice.call(arguments))) : void 0);
          }
          return _results;
        };
      });
      return start;
    }
  });

}).call(this);
