// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  _.mixin({
    then: function(obj, fn) {
      if (_(fn).isFunction()) {
        fn();
      } else {
        fn;

      }
      return obj;
    }
  });

  describe("the underscore waterfall plugin", function() {
    beforeEach(function() {
      var wffn,
        _this = this;
      this.wffnSpy = sinon.spy();
      wffn = function() {
        var args, callback, err, _i;
        err = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
        _this.wffnSpy();
        return callback.apply(null, [err].concat(__slice.call(args)));
      };
      return this._wffn = _(wffn).waterfall();
    });
    return describe("the waterfall method", function() {
      it("should exist", function() {
        return _.should.have.property("waterfall");
      });
      it("should make original function also callable", function() {
        this._wffn();
        return this.wffnSpy.called.should.be["true"];
      });
      it("should call function registered by `then` method", function() {
        var result,
          _this = this;
        result = this._wffn;
        return _([0, 1, 2, 3, 4]).chain().map(function() {
          return sinon.spy();
        }).forEach(function(spy, index) {
          return result = result.then(function(err, inputIndex, callback) {
            spy(inputIndex);
            return callback(null, index);
          });
        }).then(function() {
          return _this._wffn(0);
        }).forEach(function(spy, index) {
          spy.called.should.be["true"];
          return spy.calledWith(index).should.be["true"];
        });
      });
      it("should call function registered by `done` method", function() {
        var doneSpy, result,
          _this = this;
        result = this._wffn;
        doneSpy = sinon.spy();
        _([0, 1, 2, 3, 4]).chain().forEach(function() {
          return result = result.then(function(err, callback) {
            return callback();
          });
        }).then(function() {
          return result.done(doneSpy);
        }).then(function() {
          return _this._wffn();
        });
        return doneSpy.called.should.be["true"];
      });
      it("should call function registered by `fail` method", function() {
        var failSpy, result,
          _this = this;
        result = this._wffn;
        failSpy = sinon.spy();
        _([0, 1, 2, 3, 4]).chain().forEach(function(index) {
          return result = result.then(function(err, callback) {
            if (index === 3) {
              return callback("err");
            } else {
              return callback();
            }
          });
        }).then(function() {
          return result.fail(failSpy);
        }).then(function() {
          return _this._wffn();
        });
        return failSpy.called.should.be["true"];
      });
      it("should call function registered by `anyway` method when done", function() {
        var anywaySpy, result,
          _this = this;
        result = this._wffn;
        anywaySpy = sinon.spy();
        _([0, 1, 2, 3, 4]).chain().forEach(function() {
          return result = result.then(function(err, callback) {
            return callback();
          });
        }).then(function() {
          return result.anyway(anywaySpy);
        }).then(function() {
          return _this._wffn();
        });
        return anywaySpy.called.should.be["true"];
      });
      return it("should call function registered by `anyway` method when failed", function() {
        var anywaySpy, result,
          _this = this;
        result = this._wffn;
        anywaySpy = sinon.spy();
        _([0, 1, 2, 3, 4]).chain().forEach(function(index) {
          return result = result.then(function(err, callback) {
            if (index === 3) {
              return callback("err");
            } else {
              return callback();
            }
          });
        }).then(function() {
          return result.anyway(anywaySpy);
        }).then(function() {
          return _this._wffn();
        });
        return anywaySpy.called.should.be["true"];
      });
    });
  });

}).call(this);
