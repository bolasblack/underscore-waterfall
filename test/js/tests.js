// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  _.mixin({
    then: function(obj, fn) {
      if (_(fn).isFunction()) {
        fn();
      } else {
        fn;

      }
      return obj;
    }
  });

  describe("the underscore waterfall plugin", function() {
    beforeEach(function() {
      var _this = this;
      this.doneSpy = sinon.spy();
      this.anywaySpy1 = sinon.spy();
      _.waterfall(function(arg1, callback) {
        _this.originalArg = arg1;
        return callback(null, "some args");
      }).then(function(arg1, callback) {
        _this.thenFn1Arg = arg1;
        return callback(null, "args1", "args2");
      }).then(function(arg1, arg2, callback) {
        _this.thenFn2Arg1 = arg1;
        _this.thenFn2Arg2 = arg2;
        return callback(null, "some other args");
      }).then("straight", "passin", "arguments").then(function(arg1, arg2, arg3, callback) {
        _this.thenFn4Arg1 = arg1;
        _this.thenFn4Arg2 = arg2;
        _this.thenFn4Arg3 = arg3;
        return callback();
      }).done(function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _this.doneArgs = args;
        return _this.doneSpy.apply(_this, args);
      }).anyway(this.anywaySpy1)("first function args");
      this.failSpy = sinon.spy();
      this.anywaySpy2 = sinon.spy();
      return _.waterfall(function(callback) {
        return callback();
      }).then().then(function(callback) {
        _this.thenFn5Called = true;
        return callback();
      }).then(function(callback) {
        return callback("some error message", "other", "args");
      }).fail(this.failSpy).anyway(this.anywaySpy2)();
    });
    return describe("the waterfall method", function() {
      it("should make original function also callable", function() {
        return this.originalArg.should.equal("first function args");
      });
      it("should call function registered by `then` method", function() {
        this.thenFn1Arg.should.equal("some args");
        this.thenFn2Arg1.should.equal("args1");
        return this.thenFn2Arg2.should.equal("args2");
      });
      it("should pass in object to callback what not a function", function() {
        this.thenFn4Arg1.should.equal("straight");
        this.thenFn4Arg2.should.equal("passin");
        return this.thenFn4Arg3.should.equal("arguments");
      });
      it("should call function registered by `done` method", function() {
        return this.doneSpy.calledWith("first function args", "some args", ["args1", "args2"], "some other args", ["straight", "passin", "arguments"]).should.be["true"];
      });
      it("should skip when called by empty argument", function() {
        return this.thenFn5Called.should.be["true"];
      });
      it("should call function registered by `fail` method", function() {
        return this.failSpy.calledWith("some error message").should.be["true"];
      });
      it("should call function registered by `anyway` method when done", function() {
        return this.anywaySpy1.calledWith(null, "first function args", "some args", ["args1", "args2"], "some other args", ["straight", "passin", "arguments"]).should.be["true"];
      });
      return it("should call function registered by `anyway` method when failed", function() {
        return this.anywaySpy2.calledWith("some error message").should.be["true"];
      });
    });
  });

}).call(this);
